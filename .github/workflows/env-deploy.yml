name: Env Deploy (dev/qa/stage/prod)

on:
  push:
    branches:
      - main
      - 'feat/**'
      - 'qa/**'
      - 'release/**'
  tags:
    - 'v*'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Debug environment
        run: |
          node -v
          npm -v
          git --version
          echo "Runner: $RUNNER_OS"
          echo "Ref: $GITHUB_REF"
          echo "SHA: ${GITHUB_SHA}"
          ls -la
      - name: Install dependencies (ci with fallback)
        run: |
          set -e
          (npm ci) || (echo "npm ci failed, falling back to npm install" && npm install)
      - name: Build
        run: npm run build
      - name: Smoke test build artifacts
        run: |
          set -e
          test -f dist/index.html
          test -f dist/style.css
          test -f dist/app.js
          test -f dist/discovery.html
          # sanity content checks
          grep -qi '<title' dist/index.html
          grep -qi 'class="app-container"' dist/index.html
          echo "Smoke tests passed"
      - name: Determine environment and path
        id: env
        run: |
          REF="${GITHUB_REF}"
          SHA="${GITHUB_SHA:0:7}"
          ENV=""
          NAME=""
          if [[ "$GITHUB_REF" == refs/heads/feat/* ]]; then ENV=dev; NAME=${GITHUB_REF#refs/heads/}; fi
          if [[ "$GITHUB_REF" == refs/heads/qa/* ]]; then ENV=qa; NAME=${GITHUB_REF#refs/heads/}; fi
          if [[ "$GITHUB_REF" == refs/heads/release/* ]]; then ENV=stage; NAME=${GITHUB_REF#refs/heads/}; fi
          if [[ "$GITHUB_REF" == refs/heads/main ]]; then ENV=qa; NAME=main-${SHA}; fi
          if [[ "$GITHUB_REF" == refs/tags/v*-rc* ]]; then ENV=stage; NAME=${GITHUB_REF#refs/tags/}; fi
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then ENV=prod; NAME=${GITHUB_REF#refs/tags/}; fi
          if [[ -z "$ENV" ]]; then echo "ENV not determined; skipping"; echo "skip=true" >> $GITHUB_OUTPUT; exit 0; fi
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "path=env/$ENV/$NAME" >> $GITHUB_OUTPUT
      - name: Generate provenance
        if: steps.env.outputs.skip != 'true'
        run: |
          node -e '
            const fs=require("fs"),crypto=require("crypto");
            function walk(dir, list=[]) { for (const f of fs.readdirSync(dir)) { const p=dir+"/"+f; const s=fs.statSync(p); if (s.isDirectory()) walk(p,list); else list.push(p);} return list; }
            const files=walk("dist");
            const hashes={};
            for(const f of files){ const b=fs.readFileSync(f); const h=crypto.createHash("sha256").update(b).digest("hex"); hashes[f.replace(/^dist\//,"")]=h; }
            const out={ commit: process.env.GITHUB_SHA, generated_at: new Date().toISOString(), files: hashes };
            fs.writeFileSync("dist/_provenance.json", JSON.stringify(out,null,2));'
      - name: Publish artifact, update latest, and manifest (gh-pages)
        if: steps.env.outputs.skip != 'true'
        env:
          ENV: ${{ steps.env.outputs.env }}
          NAME: ${{ steps.env.outputs.name }}
          DEST: ${{ steps.env.outputs.path }}
        run: |
          set -euo pipefail
          mkdir -p repo
          cd repo
          git init
          git config user.name github-actions
          git config user.email github-actions@github.com
          git remote add origin "${{ github.server_url }}/${{ github.repository }}.git"
          git fetch origin gh-pages:gh-pages || true
          if git rev-parse --verify gh-pages >/dev/null 2>&1; then
            git checkout gh-pages
          else
            git checkout --orphan gh-pages
            rm -rf ./* .[^.]* || true
            cat > index.html << 'EOF'
<!DOCTYPE html><title>Build Catalog</title><p>Initialized gh-pages
EOF
            git add index.html
            git commit -m "chore: init gh-pages"
          fi
          # Copy artifact to destination path
          mkdir -p "$(dirname "$DEST")"
          rm -rf "$DEST"
          mkdir -p "$DEST"
          cp -R ../dist/* "$DEST"/
          # Update latest pointer
          rm -rf "env/$ENV/latest"
          mkdir -p "env/$ENV"
          cp -R "$DEST" "env/$ENV/latest"
          # Update manifest (env/manifest.json)
          node -e '
            const fs=require("fs");
            const path=require("path");
            const env=process.env.ENV, name=process.env.NAME, dest=process.env.DEST;
            const entry={ env, name, path: dest, commit: process.env.GITHUB_SHA, created_at: new Date().toISOString(), source: process.env.GITHUB_REF, type: "build" };
            const root="env"; if(!fs.existsSync(root)) fs.mkdirSync(root);
            const mf=path.join(root,"manifest.json");
            let data={ envs:{ dev:[], qa:[], stage:[], prod:[], preview:[] }, updated_at: new Date().toISOString() };
            if(fs.existsSync(mf)) { try { data=JSON.parse(fs.readFileSync(mf,"utf8")); } catch(e){} }
            if(!data.envs) data.envs={};
            if(!data.envs[env]) data.envs[env]=[];
            // de-dup same path
            data.envs[env]=data.envs[env].filter(e=>e.path!==dest);
            data.envs[env].unshift(entry);
            // keep last 100 entries per env
            data.envs[env]=data.envs[env].slice(0,100);
            data.updated_at=new Date().toISOString();
            fs.writeFileSync(mf, JSON.stringify(data,null,2));
            // Simple index.html
            const doctype = '<' + '!DOCTYPE html>';
            const html=[
              doctype,'<meta charset="utf-8">','<title>Build Catalog</title>',
              '<h1>Build Catalog</h1>',
              ...Object.entries(data.envs).map(([k,arr])=>`<h2>${k}</h2><ul>`+arr.map(i=>`<li><a href="/${i.path}/">${i.name}</a> <small>${i.created_at} (${i.commit?.slice(0,7)||''})</small></li>`).join('')+"</ul>")
            ].join('\n');
            fs.writeFileSync(path.join('.', 'index.html'), html);
          '
          # Commit and push
          git add "$DEST" "env/$ENV/latest" env/manifest.json index.html
          git commit -m "deploy: $DEST and update $ENV/latest (ref $GITHUB_REF @ ${GITHUB_SHA::7})" || true
          git push origin gh-pages
          cd -
