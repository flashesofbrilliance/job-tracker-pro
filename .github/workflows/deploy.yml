name: Unified Deploy (PR/dev/qa/stage/prod)

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - 'feat/**'
      - 'qa/**'
      - 'release/**'
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number for preview (optional)'
        required: false

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "deploy-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5
      - name: Install dependencies
        run: |
          (npm ci) || npm install
      - name: Build
        run: npm run build
      - name: Smoke test build artifacts
        run: |
          set -e
          test -f dist/index.html
          test -f dist/style.css
          test -f dist/app.js
          test -f dist/discovery.html
          test -f dist/discovery-table.html
          test -f dist/discovery-table.js
          grep -qi '<title' dist/index.html
          grep -qi 'class="app-container"' dist/index.html
          echo "Smoke tests passed"
      - name: Determine mode and destination
        id: mode
        env:
          PR_NUMBER_INPUT: ${{ github.event.inputs.pr_number }}
        run: |
          set -euo pipefail
          EVENT="${GITHUB_EVENT_NAME}"
          REF="${GITHUB_REF}"
          SHA="${GITHUB_SHA:0:7}"
          MODE=""; NAME=""; DEST="";
          if [ "$EVENT" = "pull_request" ]; then
            # Use PR number from context
            MODE=preview
            PRNUM=$(jq -r .pull_request.number < "$GITHUB_EVENT_PATH")
            NAME="pr-${PRNUM}"
            DEST="env/$MODE/$NAME"
          else
            case "$REF" in
              refs/heads/feat/*)  MODE=dev;   NAME=${REF#refs/heads/} ;;
              refs/heads/qa/*)    MODE=qa;    NAME=${REF#refs/heads/} ;;
              refs/heads/release/*) MODE=stage; NAME=${REF#refs/heads/} ;;
              refs/heads/main)    MODE=qa;    NAME=main-${SHA} ;;
              refs/tags/v*-rc*)   MODE=stage; NAME=${REF#refs/tags/} ;;
              refs/tags/v*)       MODE=prod;  NAME=${REF#refs/tags/} ;;
              *) MODE="" ;;
            esac
            if [ -n "$MODE" ]; then DEST="env/$MODE/$NAME"; fi
          fi
          if [ -z "$MODE" ] || [ -z "$DEST" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "No matching mode for event=$EVENT ref=$REF; skipping publish"
            exit 0
          fi
          echo "mode=$MODE" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "dest=$DEST" >> $GITHUB_OUTPUT
          echo "url=https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}/$DEST/" >> $GITHUB_OUTPUT
      - name: Prepare site artifact (env structure)
        if: steps.mode.outputs.skip != 'true'
        env:
          MODE: ${{ steps.mode.outputs.mode }}
          NAME: ${{ steps.mode.outputs.name }}
          DEST: ${{ steps.mode.outputs.dest }}
        run: |
          set -euo pipefail
          mkdir -p site
          mkdir -p "site/$(dirname "$DEST")"
          rm -rf "site/$DEST"
          mkdir -p "site/$DEST"
          cp -R dist/* "site/$DEST"/
          # Update latest pointer for non-preview envs within site
          if [ "$MODE" != "preview" ]; then
            rm -rf "site/env/$MODE/latest"
            mkdir -p "site/env/$MODE"
            cp -R "site/$DEST" "site/env/$MODE/latest"
          fi
          # Write a minimal manifest and index
          node -e '
            const fs=require("fs"),path=require("path");
            const env=process.env.MODE, dest=process.env.DEST; const name=process.env.NAME;
            const entry={ env, name, path: dest, commit: process.env.GITHUB_SHA, created_at: new Date().toISOString(), source: process.env.GITHUB_REF, type: env==="preview"?"preview":"build" };
            const root=path.join("site","env"); fs.mkdirSync(root,{recursive:true});
            const data={ envs:{ dev:[], qa:[], stage:[], prod:[], preview:[] }, updated_at: new Date().toISOString() };
            data.envs[env]=[entry];
            fs.writeFileSync(path.join(root,"manifest.json"), JSON.stringify(data,null,2));
            const doctype = '<' + '!DOCTYPE html>';
            const html=[doctype,'<meta charset="utf-8">','<title>Build Catalog</title>','<h1>Build Catalog</h1>',...Object.entries(data.envs).map(([k,arr])=>`<h2>${k}</h2><ul>`+arr.map(i=>`<li><a href="/${i.path}/">${i.name}</a> <small>${i.created_at} (${i.commit?.slice(0,7)||''})</small></li>`).join('')+"</ul>")].join('\n');
            fs.writeFileSync(path.join('site', 'index.html'), html);
          '
      - name: Upload Pages artifact
        if: steps.mode.outputs.skip != 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: site
      - name: Deploy to GitHub Pages
        if: steps.mode.outputs.skip != 'true'
        id: deploy
        uses: actions/deploy-pages@v4
      - name: Comment preview URL (PRs only)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request.number;
            const url = `https://${context.repo.owner}.github.io/${context.repo.repo}/env/preview/pr-${pr}/`;
            const body = `ðŸš€ Preview deployed: ${url}`;
            github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr, body });
