{
  "info": {
    "name": "ðŸ’° Cache Money Bebe - API Testing Suite",
    "description": "Comprehensive API testing collection for cache-money-bebe library. Tests cache operations, performance metrics, health checks, and advanced features.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic variables",
          "pm.globals.set('timestamp', Date.now());",
          "pm.globals.set('random_key', 'test_' + Math.random().toString(36).substr(2, 9));",
          "",
          "// Set cache test data",
          "const testData = {",
          "  user: {",
          "    id: Math.floor(Math.random() * 1000),",
          "    name: 'Test User ' + Date.now(),",
          "    email: 'test@example.com'",
          "  },",
          "  product: {",
          "    id: Math.floor(Math.random() * 1000),",
          "    name: 'Test Product',",
          "    price: Math.floor(Math.random() * 100) + 10",
          "  }",
          "};",
          "",
          "pm.globals.set('test_data', JSON.stringify(testData));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test assertions",
          "pm.test('Response time is acceptable', function () {",
          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct headers', function () {",
          "  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Log response for debugging",
          "if (pm.response.code >= 400) {",
          "  console.log('Error Response:', pm.response.text());",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "api_version",
      "value": "v1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "ðŸš€ Cache Initialization",
      "item": [
        {
          "name": "Initialize Cache System",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"config\": {\n    \"revolvingDoor\": {\n      \"maxLocalCacheSize\": 100,\n      \"conveyorBeltCycle\": 2000\n    },\n    \"integration\": {\n      \"syncMode\": \"adaptive\"\n    },\n    \"enableLogging\": true\n  },\n  \"preWarm\": [\n    {\n      \"key\": \"app:config\",\n      \"fetcher\": \"fetchAppConfig\"\n    },\n    {\n      \"key\": \"user:session\",\n      \"fetcher\": \"fetchUserSession\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/initialize",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "initialize"]
            },
            "description": "Initialize the cache system with custom configuration and pre-warming"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cache initialization successful', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.cacheId).to.exist;",
                  "  pm.globals.set('cache_id', response.cacheId);",
                  "});",
                  "",
                  "pm.test('Initialization time acceptable', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.initTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Pre-warm completed', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.preWarmCompleted).to.be.true;",
                  "  pm.expect(response.preWarmedKeys).to.have.length.above(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Check Cache Status",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/status",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "status"]
            },
            "description": "Check current cache system status and health"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cache status check successful', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.isReady).to.be.true;",
                  "  pm.expect(response.fplComplete).to.be.true;",
                  "});",
                  "",
                  "pm.test('Cache strategies active', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.activeStrategies).to.include('revolving-door');",
                  "  pm.expect(response.activeStrategies).to.include('payload-strap');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ðŸ’¾ Cache Operations",
      "item": [
        {
          "name": "Set Cache Value",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"key\": \"{{random_key}}\",\n  \"data\": {{test_data}},\n  \"options\": {\n    \"ttl\": 300000,\n    \"tags\": [\"test\", \"user\"],\n    \"priority\": \"high\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/set",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "set"]
            },
            "description": "Set a value in the cache with options"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cache set successful', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.key).to.equal(pm.globals.get('random_key'));",
                  "});",
                  "",
                  "pm.test('Cache metadata present', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.metadata).to.exist;",
                  "  pm.expect(response.metadata.cacheLayer).to.exist;",
                  "  pm.expect(response.metadata.timestamp).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Cache Value",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/get/{{random_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "get", "{{random_key}}"]
            },
            "description": "Retrieve a value from the cache"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cache get successful', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.data).to.exist;",
                  "});",
                  "",
                  "pm.test('Cache hit recorded', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.cacheHit).to.be.true;",
                  "  pm.expect(response.responseTime).to.be.below(50);",
                  "});",
                  "",
                  "pm.test('Data integrity maintained', function () {",
                  "  const response = pm.response.json();",
                  "  const originalData = JSON.parse(pm.globals.get('test_data'));",
                  "  pm.expect(response.data.user.id).to.equal(originalData.user.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get with Fetch Function",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"key\": \"user:{{timestamp}}\",\n  \"fetchFunction\": \"fetchUser\",\n  \"fetchParams\": {\n    \"userId\": {{timestamp}}\n  },\n  \"options\": {\n    \"priority\": \"high\",\n    \"ttl\": 600000,\n    \"tags\": [\"user\", \"profile\"]\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/get-or-fetch",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "get-or-fetch"]
            },
            "description": "Get data from cache or fetch if not available"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get or fetch successful', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.data).to.exist;",
                  "});",
                  "",
                  "pm.test('Cache operation tracked', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.wasCached).to.be.a('boolean');",
                  "  pm.expect(response.source).to.be.oneOf(['cache', 'fetch', 'hybrid']);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Prefetch Multiple Keys",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"keys\": [\n    \"user:124\",\n    \"user:125\",\n    \"user:126\",\n    \"product:456\",\n    \"product:457\"\n  ],\n  \"options\": {\n    \"priority\": \"medium\",\n    \"batchSize\": 3\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/prefetch",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "prefetch"]
            },
            "description": "Prefetch multiple keys for future use"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prefetch initiated successfully', function () {",
                  "  pm.response.to.have.status(202);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.jobId).to.exist;",
                  "});",
                  "",
                  "pm.test('Prefetch queue populated', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.queuedKeys).to.have.length.above(0);",
                  "  pm.expect(response.estimatedTime).to.be.above(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalidate Cache Pattern",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"pattern\": \"user:*\",\n  \"options\": {\n    \"async\": true,\n    \"notify\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/invalidate",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "invalidate"]
            },
            "description": "Invalidate cache entries by pattern"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalidation successful', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.invalidatedCount).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Invalidation statistics provided', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.affectedLayers).to.exist;",
                  "  pm.expect(response.executionTime).to.be.above(0);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ðŸ“Š Performance & Monitoring",
      "item": [
        {
          "name": "Get Cache Statistics",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "stats"]
            },
            "description": "Get comprehensive cache performance statistics"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Statistics retrieved successfully', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.cacheHits).to.be.a('number');",
                  "  pm.expect(response.cacheMisses).to.be.a('number');",
                  "  pm.expect(response.hitRatio).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Performance metrics present', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.avgResponseTime).to.exist;",
                  "  pm.expect(response.memoryUsage).to.exist;",
                  "  pm.expect(response.circuitBreakerStatus).to.exist;",
                  "});",
                  "",
                  "pm.test('Cache efficiency acceptable', function () {",
                  "  const response = pm.response.json();",
                  "  if (response.totalRequests > 10) {",
                  "    pm.expect(response.hitRatio).to.be.above(0.5);",
                  "  }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/health",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "health"]
            },
            "description": "Comprehensive cache system health check"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.status).to.be.oneOf(['healthy', 'degraded', 'unhealthy']);",
                  "});",
                  "",
                  "pm.test('System metrics available', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.uptime).to.be.a('number');",
                  "  pm.expect(response.memoryUsage).to.be.a('number');",
                  "  pm.expect(response.cacheEfficiency).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('No critical issues', function () {",
                  "  const response = pm.response.json();",
                  "  const criticalIssues = response.issues?.filter(i => i.severity === 'critical') || [];",
                  "  pm.expect(criticalIssues).to.have.length(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Performance Benchmark",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"testSuite\": {\n    \"operations\": 1000,\n    \"concurrency\": 10,\n    \"keyPattern\": \"bench_*\",\n    \"duration\": 30000\n  },\n  \"scenarios\": [\n    {\n      \"name\": \"cache_hits\",\n      \"weight\": 0.7,\n      \"operation\": \"get\"\n    },\n    {\n      \"name\": \"cache_misses\",\n      \"weight\": 0.2,\n      \"operation\": \"get_or_fetch\"\n    },\n    {\n      \"name\": \"cache_sets\",\n      \"weight\": 0.1,\n      \"operation\": \"set\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/benchmark",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "benchmark"]
            },
            "description": "Run performance benchmark tests"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Benchmark initiated successfully', function () {",
                  "  pm.response.to.have.status(202);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.benchmarkId).to.exist;",
                  "  pm.expect(response.estimatedDuration).to.be.above(0);",
                  "  pm.globals.set('benchmark_id', response.benchmarkId);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Benchmark Results",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/benchmark/{{benchmark_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "benchmark", "{{benchmark_id}}"]
            },
            "description": "Get benchmark test results"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Benchmark results available', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.status).to.be.oneOf(['running', 'completed', 'failed']);",
                  "});",
                  "",
                  "if (pm.response.json().status === 'completed') {",
                  "  pm.test('Performance metrics within acceptable range', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results.avgResponseTime).to.be.below(100);",
                  "    pm.expect(response.results.errorRate).to.be.below(0.01);",
                  "    pm.expect(response.results.throughput).to.be.above(100);",
                  "  });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ðŸ”§ Advanced Features",
      "item": [
        {
          "name": "Memory Pressure Simulation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"pressureLevel\": \"critical\",\n  \"duration\": 10000,\n  \"options\": {\n    \"triggerCleanup\": true,\n    \"monitorResponse\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/simulate/memory-pressure",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "simulate", "memory-pressure"]
            },
            "description": "Simulate memory pressure to test adaptive behavior"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Memory pressure simulation started', function () {",
                  "  pm.response.to.have.status(202);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.simulationId).to.exist;",
                  "});",
                  "",
                  "pm.test('Adaptive response triggered', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.adaptationsTriggered).to.be.a('array');",
                  "  pm.expect(response.cacheStateChanged).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Circuit Breaker Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"testType\": \"failure_cascade\",\n  \"failureRate\": 0.8,\n  \"requestCount\": 20,\n  \"options\": {\n    \"resetCircuit\": true,\n    \"monitorRecovery\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/test/circuit-breaker",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "test", "circuit-breaker"]
            },
            "description": "Test circuit breaker functionality under failure conditions"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Circuit breaker test completed', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.testResults).to.exist;",
                  "});",
                  "",
                  "pm.test('Circuit breaker activated correctly', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.testResults.circuitOpened).to.be.true;",
                  "  pm.expect(response.testResults.failureThresholdReached).to.be.true;",
                  "});",
                  "",
                  "pm.test('Recovery mechanism working', function () {",
                  "  const response = pm.response.json();",
                  "  if (response.testResults.recoveryTested) {",
                  "    pm.expect(response.testResults.recoverySuccessful).to.be.true;",
                  "  }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Stress Test - Recursion Protection",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"testType\": \"recursive_calls\",\n  \"maxDepth\": 15,\n  \"concurrency\": 5,\n  \"options\": {\n    \"expectBlocking\": true,\n    \"measurePerformance\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/test/recursion-protection",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "test", "recursion-protection"]
            },
            "description": "Test recursion guard protection mechanisms"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Recursion protection test completed', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.testResults).to.exist;",
                  "});",
                  "",
                  "pm.test('Recursion guard activated', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.testResults.recursionBlocked).to.be.true;",
                  "  pm.expect(response.testResults.maxDepthEnforced).to.be.true;",
                  "});",
                  "",
                  "pm.test('System remained stable', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.testResults.systemStable).to.be.true;",
                  "  pm.expect(response.testResults.memoryLeakDetected).to.be.false;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ðŸ”„ Configuration & Management",
      "item": [
        {
          "name": "Get Current Configuration",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/config",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "config"]
            },
            "description": "Get current cache configuration"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Configuration retrieved successfully', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.config).to.exist;",
                  "  pm.expect(response.environment).to.exist;",
                  "});",
                  "",
                  "pm.test('Configuration is valid', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.config.revolvingDoor).to.exist;",
                  "  pm.expect(response.config.payloadCache).to.exist;",
                  "  pm.expect(response.config.integration).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Configuration",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"updates\": {\n    \"revolvingDoor\": {\n      \"maxLocalCacheSize\": 150,\n      \"conveyorBeltCycle\": 1800\n    },\n    \"integration\": {\n      \"syncMode\": \"aggressive\",\n      \"maxPrefetchDistance\": 8\n    }\n  },\n  \"options\": {\n    \"validateChanges\": true,\n    \"applyImmediately\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/config",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "config"]
            },
            "description": "Update cache configuration at runtime"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Configuration updated successfully', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.changesApplied).to.have.length.above(0);",
                  "});",
                  "",
                  "pm.test('Validation passed', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.validationErrors).to.have.length(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Reset Configuration",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/config/reset",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "config", "reset"]
            },
            "description": "Reset configuration to default values"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Configuration reset successful', function () {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.resetToDefaults).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ðŸ§ª Load Testing Suite",
      "item": [
        {
          "name": "High Volume Cache Operations",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"testProfile\": {\n    \"operations\": 10000,\n    \"concurrency\": 50,\n    \"duration\": 60000,\n    \"rampUp\": 5000\n  },\n  \"operationMix\": {\n    \"get\": 0.6,\n    \"set\": 0.2,\n    \"getOrFetch\": 0.15,\n    \"invalidate\": 0.05\n  },\n  \"dataProfile\": {\n    \"keyPattern\": \"load_test_{{uuid}}\",\n    \"valueSize\": \"1kb\",\n    \"ttlRange\": [60000, 600000]\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/load-test/high-volume",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "load-test", "high-volume"]
            },
            "description": "High volume load test with mixed operations"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Load test initiated', function () {",
                  "  pm.response.to.have.status(202);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.testId).to.exist;",
                  "  pm.globals.set('load_test_id', response.testId);",
                  "});",
                  "",
                  "pm.test('Test parameters accepted', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.estimatedDuration).to.be.above(0);",
                  "  pm.expect(response.operationsPlanned).to.be.above(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Memory Stress Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"testType\": \"memory_exhaustion\",\n  \"targetMemoryUsage\": 0.9,\n  \"incrementalLoad\": true,\n  \"options\": {\n    \"monitorAdaptation\": true,\n    \"testRecovery\": true,\n    \"safetyLimits\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/cache/load-test/memory-stress",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "cache", "load-test", "memory-stress"]
            },
            "description": "Memory stress test to validate adaptive behavior"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Memory stress test started', function () {",
                  "  pm.response.to.have.status(202);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.testId).to.exist;",
                  "});",
                  "",
                  "pm.test('Safety mechanisms active', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.safetyLimitsEnabled).to.be.true;",
                  "  pm.expect(response.adaptiveMonitoringEnabled).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}